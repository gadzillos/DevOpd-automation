---
- name: create user for wildfly server
  user:
    name: "{{ wildfly_user }}"
    shell: /bin/false
    comment: "Wildfly User"
    
- name: Install unzip and java
  yum:
    name: 
       - unzip
       - java-1.8.0-openjdk-devel
    state: latest
        
# - name: check if "Java" is installed
#   yum: 
#     list="{java-1.8.0-openjdk}"
#   register: is_installed

- name: Ensure Java is installed.
  package:
    name: java-1.8.0-openjdk
    state: present

      
- name: Download liferay+wildfly
  ansible.builtin.command:
    argv: 
      - curl
      - "{{ https_uri }}"
      - -L
      - -o
      - /opt/liferay_portal

- name: Create liferay home directory
  ansible.builtin.file:
    path: "{{ liferay_home_dir }}"
    state: directory
    mode: 0700

- name: Extract liferay+wildfly bundle archive into liferay home dir
  ansible.builtin.unarchive:
    src: /opt/liferay_portal
    dest: "{{ liferay_home_dir }}"
    remote_src: yes
    extra_opts: [--strip-components=1]

- name: Download postgresql.jar
  ansible.builtin.command:
    argv:
      - curl
      - "{{ postgresql_jar_uri }}"
      - -o 
      - "{{liferay_home_dir}}/wildfly-11.0.0/modules/com/liferay/portal/main/postgresql.jar"

- name: Create liferay portal config from tempplate and add in setup wizard
  ansible.builtin.template:
    src: liferay.cfg.j2
    dest: "{{liferay_home_dir}}/portal-setup-wizard.properties"
    mode: 0600

- name: Create wildfly service description file for systemd
  ansible.builtin.template:
    src: wildfly.service.j2
    dest: /etc/systemd/system/wildfly.service
    mode: 0744

# - name: Add admin user to WildFly
#   shell: "/opt/wildfly/bin/add-user.sh {{admin_username}} {{admin_password}}"

# - name: edit standalone.xml to run on server ip adress
#   replace:
#     path: /opt/wildfly/standalone/configuration/standalone.xml
#     backup: yes
#     regexp: '127\.0\.0\.1'
#     replace: "{{ ansible_default_ipv4.address }}"
               
# - name: run wildfly server as a service
#   copy:
#     src: "{{ item.src }}" 
#     dest: "{{ item.dest }}"
#     owner: wildfly
#     mode: "0744"
#     remote_src: yes
#   with_items:
#     - { src: /opt/wildfly/docs/contrib/scripts/init.d/wildfly-init-redhat.sh , dest: /etc/init.d/wildfly } 
#     - { src: /opt/wildfly/docs/contrib/scripts/init.d/wildfly.conf , dest: /etc/default } 

# - name: add wildfly to init.d
#   command: "{{ item }}"
#   with_items:
#     - /usr/sbin/chkconfig --add /etc/init.d/wildfly
#     - /usr/sbin/chkconfig --level 2345 wildfly on
#     - systemctl daemon-reload

- name: start wildfly
  systemd: 
    name: wildfly
    state: started
    enabled: true
    daemon_reload: true
        
- name: check if server is up on 8080
  uri:
    url: "http://{{ server_url }}:8080"
    return_content: true
    ignore_errors: yes
    timeout: 5
    body_format: raw
  retries: 15
  delay: 5

# - name: check if server is up on 8080
#   uri:
#     url: "http://{{ server_url }}:8080"
#     method: GET
#     return_content: "yes"
#     timeout: 5
#     body_format: raw
#     follow_redirects: "no"
#     status_code: 200,403
#   register: result
#   until: (result.status == 403 or result.status == 200) and (result.content.find("Please wait while") == -1)
#   retries: 60
#   delay: 5
#   changed_when: false
#   check_mode: false